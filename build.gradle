import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat
import org.ajoberstar.grgit.*



apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'maven'
apply plugin: 'com.diffplug.gradle.spotless'


sourceCompatibility = 1.7
targetCompatibility = 1.7

if (version == 'unspecified') {
    version = getVersionName()
}

ext.repo = Grgit.open(project.file('.'))


spotless {
    java {
        eclipseFormatFile 'build-resources/eclipse.prefs.formatter.xml'
    }
}


configurations {
    deployerJars
}


task wrapper(type: Wrapper) {
    gradleVersion='2.1'
}

install {
    repositories.mavenInstaller {
        pom.version = project.version;
        pom.artifactId = 'clientserver';
        pom.groupId = 'net.rptools.clientserver';
    }
}


uploadArchives {
    repositories.mavenDeployer {
        pom.version = project.version;
        pom.artifactId = 'clientserver';
        pom.groupId = 'net.rptools.clientserver';
        configuration = configurations.deployerJars;
        repository url: 'file://' + projectDir + '/../maven-repo'
    }
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.11.2'
        classpath 'com.diffplug.gradle.spotless:spotless:1.3.0-SNAPSHOT'
    }
}


dependencies {
    compile 'commons-logging:commons-logging:1.1.1'
    compile 'log4j:log4j:1.2.16'
    compile 'com.caucho.hessian:hessian:3.1.6'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    deployerJars 'org.apache.maven.wagon:wagon-ssh:3.4.3'
}

ext.compileDate = new Date();
ext.yyyymmdd = (new SimpleDateFormat('yyyyMMDD')).format(ext.compileDate);


repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = 'http://maptool.craigs-stuff.net/repo/'
    }
}


/*
 * Gets the version name from the latest Git tag
 */

def getVersionName() {

    if (project.hasProperty('buildVersion')) {
        return buildVersion
    } else {
        String vtxtVersionNo = new File('build-resources/version.txt').text.trim()

        return vtxtVersionNo
    }
}

findbugs {
    ignoreFailures = true
    toolVersion = '3.0.0'
    effort = 'max'
    sourceSets = []  // Empty source set so it wont run during build/check
}

pmd {
    ignoreFailures = true
    sourceSets = []  // Empty source set so it wont run during tebuild/check
}



task showBuildVersion() << {
    println 'Build Version Number = ' + project.version
}

jar {
    manifest {
        attributes 'Implementation-Title': 'clientserver',
                   'Implementation-Version': project.version
    }
}

